lda <getal> | <adres>
ldb <getal> | <adres>


add     # regA + regB -> regR (result) -> RegA
sub 
mul
div

push    #push result to stack
pop     #pop stack to regA
call <adres>    #call an subroutine
ret             #Return from subroutine

sto   <adres>   #stores result to memory
sta   <adres>
stb   <adres>
lma   <adres>   #loads from mem adres to regA
lmb   <adres>   #loads from mem adres to regB

lix   <adres>   # ld IX from memory
iix   <adres>   # ld IX from memory, inc in memory
dix   <adres>   # ld IX from memory, dec IX an store in memory

idx                 #regB to IX
stx <adres> + IX    #store regR (result)
lxa <adres> + IX
lxb <adres> + IX

inc (a | b | x)
dec (a | b | x)

jmp  <adres>
jmpx <adres> + IX 

test (eq | gt | z)  #result = 0 whem true, else result != 0

jmpt <adres>    #jump to adres when zero bit is true (when last result = 0)
jmpf <adres>    #jump to adres when zero bit is false (when last result !=0)

skip            # skip (pc = pc + 1) when zero bit is false (when last result != 0)


ise            # comapre the valuea  at adres in RegA  and at adres in regB
isz            # comapre the valuea  at adres in RegA  and 0

out <device number>     #result to buffer
in  <device number>     #Input buffer to regA

halt


